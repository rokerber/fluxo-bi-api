name: CI/CD - Build and Deploy to K3s

on:
  push:
    branches: [ main ] # Gatilho para a branch 'main'

env:
  # ATENÇÃO: Mude 'seu-usuario-dockerhub' para o seu usuário no Docker Hub ou outro registro
  IMAGE_NAME: seu-usuario-dockerhub/fluxo-bi-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # O job vai rodar em um ambiente Ubuntu

    steps:
      # 1. Baixa o código do repositório para o ambiente da pipeline
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configura o ambiente Java (JDK 17) para compilar o projeto
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Compila o projeto com Maven, gerando o arquivo .jar
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # 4. Configura o Docker Buildx (necessário para as actions de build)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 5. Faz login no seu registro de contêineres (ex: Docker Hub)
      #    As credenciais devem ser salvas como "Secrets" no seu repositório Gitea
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Constrói a imagem Docker e envia para o registro
      #    A tag da imagem será o hash do commit, garantindo uma versão única
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ gitea.sha }} # Ex: seu-usuario-dockerhub/fluxo-bi-api:a1b2c3d4

      # 7. Faz o deploy no cluster K3s
      - name: Deploy to K3s
        uses: actions-hub/kubectl@master
        env:
          # O kubeconfig deve ser salvo como um "Secret" no Gitea
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          # Substitui a imagem 'placeholder' no seu .yaml pela imagem que acabamos de criar
          args: |
            sed -i 's|image:.*|image: ${{ env.IMAGE_NAME }}:${{ gitea.sha }}|g' dev.yaml
            kubectl apply -f dev.yaml
            echo "Deploy concluído com a imagem ${{ env.IMAGE_NAME }}:${{ gitea.sha }}"