kind: pipeline
type: docker
name: consorcio-bi-api-pipeline

# Gatilho: Executa em pushes para a branch 'main' e em qualquer pull request.
trigger:
  branch:
    - main
  event:
    - push
    - pull_request
    - custom

steps:
  # Passo 1: Construir e testar a aplicação Java
  - name: build-and-test
    image: maven:3.8-openjdk-17-slim # Imagem com Maven e Java 17
    commands:
      - mvn clean install

  # Passo 2: Construir e publicar a imagem Docker
  - name: build-and-publish-image
    image: plugins/docker
    settings:
      registry: docker.io
      # Nome do repositório da imagem. Ex: "username/consorcio-bi-api"
      repo: k3rb3rdock/consorcio-bi-api
      # Tags da imagem. 'latest' e o hash do commit são boas práticas.
      tags:
        - latest
        - ${DRONE_COMMIT_SHA:0:7}
      # Usuário e senha para o registry, configurados como "secrets" no Drone
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
    # Este passo só executa em pushes para a branch 'main', e não em pull requests.
    when:
      branch:
        - main
      event:
        - push


  # Passo 3: Fazer o deploy da aplicação no cluster Kubernetes
  - name: deploy-to-k8s
    image: alpine/k8s:1.29.2 # Imagem leve com a ferramenta kubectl
    environment:
      # O pipeline precisa das credenciais do cluster, que devem ser armazenadas
      # como um secret no Drone chamado 'kube_config'.
      KUBE_CONFIG:
        from_secret: kube_config
    commands:
      # Prepara o ambiente do kubectl dentro do container do pipeline
      - mkdir -p ~/.kube
      - echo "$KUBE_CONFIG" > ~/.kube/config
      # ATUALIZA A IMAGEM: Substitui a tag da imagem no manifesto pelo hash do commit
      # IMPORTANTE: Este comando espera que o manifesto esteja em 'k8s/manifests.yaml'
      - "sed -i 's|image: consorcio-bi-api:.*|image: k3rb3rdock/consorcio-bi-api:${DRONE_COMMIT_SHA:0:7}|g' k8s/dev.yaml k8s/dev.yaml"
      # APLICA O MANIFESTO DE DEV
      - kubectl apply -f k8s/dev.yaml
      # APLICA O MANIFESTO DE STAGING
      - kubectl apply -f k8s/staging.yaml

    # Garante que o deploy só ocorra em pushes na 'main'
    when:
      branch:
        - main
      event:
        - push